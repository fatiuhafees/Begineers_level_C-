// Format Specifier % = defines and formats a type of data to be displayed 

//<stdbool.h>, used for working with bool
//<ctype.h>,   used for working with string (string and char)

//%c = char 
//%s = string (array of characters)
//%f = float
//%lf = double 
//%d = integer 
//%d = bool

//%.1 = decimal precision 
//%1 = minium field width 
//%- = left allign 

#include <stdio.h>
float item1 = 2.3222;
float item2 = 12.3222;

int main(){
//decimal precision %.1
     printf("Item 1: %.2f",item1);  //ouput: Item 1: 2.32

//minium field width %1
     printf("Item 1: %8.2f/n",item1);  //ouput: Item 1:         2.32
     printf("Item 1: %8.2f/n",item2);  //ouput: Item 2:        12.32

//left align %-1
     printf("Item 1: %-8.2f",item1);  //output: Item 1: 2.32
     printf("Item 2: %-8.2f/n",item2);//ouput: Item 2: 12.32
     return 0;
}





//Arithmetic Operators 

// +  (addition)
// -  (subtraction)
// *  (multiplication)
// /  (division)
// %  (modulus),   shows the remainder 
// ++ (increment), adds one
// -- (decrement), takes one

#include <stdio.h>
int x = 5;
int y = 2;

int main(){
// /
     float z = x / (float)y;
     printf("%f", z); //output: 2.5 

// ++
     int x++;
     printf("%d", x); //output: 6 
     return 0;
}





//User Input 

// fgets(),   allows us to get user input but with white space, includes a newline character 
// scanf(),   allows us to get user input 

#include <stdio.h>
int age;
char name[25]; 

int main(){
// scanf()
     print("How old are you:")
     scanf("%i", &age);                   //input: 17
     printf("You are %i years old", age); //output: You are 17 years old 

// fgets()
     print("Whats's your name:")
     fgets(name , 25 , stdin);            //input: Fatiu Hafees
     printf("Hello %s", name);            //output: Hello Fatiu Hafees
     return 0;
}





//Math Functions 

//#include <math.h>, used for working with the function maths
//sqrt(),  lets us find the square root of a number
//pow(),   lets us raise something to the power of
//round(), lest us round a number
//ceil(),  lest us round up a number
//floor(), lest us round down a number
//fabs(),  lest us turn a negative number positive
//log()
//sin(), cos(), tna()

#include <stdio.h>
#include <math.h>

int main(){
//pow
     int a = pow (2,4);
     printf("%i",a), //output: 16

//fabs
     int b = fabs(-100);
     printf("%i",b); //output: 100
     return 0;
}





//If Statment 

//if(){},     if something is true program does whatever is in parentheses
//else if(){}, used for checking for different outcomes 
//else{},     if statement is not true we go to else 


//switch(){}, is an alternative to using more else if statements, test value against many cases for equality so ==(same as) 
//case '':,   we case '': instead of else if 
//break:,     must  always write at the end of each case
//default:,   we use default: instead of else

// if statment 
#include <stdio.h>

int main(){
    
    double A= 3.2;
// if statement 
    if (A==3.2){
        printf("valid");
    }
// else statement 
    else {
        printf("not valid");
    }  
    return 0;
}


// switch - character
#include <stdio.h>
char grade = 'A';

int main(){
   
    switch (grade){
        case 'A':
        printf("perfect\n");
        break; 
        
        case 'B':
        printf("Alright\n");
        break; 
        
        default:
        printf("Please enter valid grade\n"); 
    }
    return 0;
}
// switch - numbers
#include <stdio.h>
#include <math.h>

int main(){
    
    int grade = 2;
   
    printf("Enter grade:");
    scanf("%d",&grade);
   
    switch (grade){
        case 2:
        printf("perfect\n");
        break; 
        
        case 3:
        printf("Alright\n");
        break; 
        
        default:
        printf("Please enter valid grade\n"); 
    }
    return 0;
}





// Logical Operators

//&&,  used to write AND, so both statements must be true
//||,  used to write OR, so at least one statement is true 
//!,   used to write NOT, so reverses the state of a condition ( ! = 0 )

#include <stdio.h>
#include <stdbool.h>

int main(){
    int sunny = 0; 
    
    if (!sunny){
        printf("It's not sunny outside");  // this string will be printed since the variable "sunny" is false ("sunny" is 0)
    }
    else{
        printf("It's sunny outside");
    }
   
}





//Function (work like subroutine) 
Functions allow us to save and reuse code at any time

//void...(){},we use this command to initialise the function
//..();,    we use this command to call the function
#include <stdio.h>

void lyrics(){
     printf("\nI came, I saw, I came, I saw");
     printf("\nI praise the Lord, then break the law");
     printf("\nI take what's mine, then take some more");
     printf("\nIt rains, it pours, it rains, it pours\n");
}
    
int main(){

    lyrics();
    lyrics();   //the lyrics above will be printed twice 
    return 0;    
}





//Arguments And Parameters 

//Parameters, what a function expects when its invoked--void function(parameters)
//Arguments, what you are sending a function--function(Argument)

#include <stdio.h>
void lyrics(char x[],char y[]){ //parametor = char x[],char y[]
    printf("\nI came, I saw, I %s, I saw",x);
    printf("\nI %s the Lord, then break the law",y);
    printf("\nI take what's mine, then take some more");
    printf("\nIt rains, it pours, it rains, it pours\n");
}
int main(){
    
    char x[]= "came";  //don't put numbers in [] for char type
    char y[]= "praise";  
    
    lyrics(x,y); //argument = x,y
    return 0;
    
}

//better version, the one above is used when we have two different data types for the function 
#include <stdio.h>
char lyrics(char x[],char y[]){ 
    printf("\nI came, I saw, I %s, I saw",x);
    printf("\nI %s the Lord, then break the law",y);
    printf("\nI take what's mine, then take some more");
    printf("\nIt rains, it pours, it rains, it pours\n");
}
int main(){
    
    lyrics("cam", "praise");    
    
    return 0;
}





//Return Statment 

//return, lets us return a value back to int main from a function

#include <stdio.h>
double math(double x)// we need to change void to the data type of what we are returning
{  
     return x * x;    
}
int main()
{                
     double num = math(2.5);
     printf("%0.2lf",num);  //output: 6.25
     return 0;
}





//Ternary Operators = shortcut to if/else when assigning/returning a values 
               
//(condition)?, if value true: if value false

#include <stdio.h>
int math(int x,int y)
{  
    return (y>x)? y:x;     
}
int main()
{ 
    int num= math(10,6);
    printf("%d",num); //output: 10 
    return 0;
}





// Function Prototypes

// Ensures that calls to a function are made with the correct arguments
// A function prototype causes the compiler to flag an error if arguments are missing
// Make it a habbit to allways have functions go after main(){}
#include <stdio.h>

void hello(char[], int); //function prototype

int main()
{
   char name[] = "Bro";
   int age = 21;

   hello(name, age);

   return 0;
}

void hello(char name[], int age)
{
   printf("\nHello %s", name);
   printf("\nYou are %d years old", age);
}





//String Functions

// strupr and strlwr dont work in c standard library for linux so look for solution in C branch :) 

// strcat(,);             // appends a character to the end of a another character 
// strncat(, ,);         // appends a number character to the end of a another character 
// strcpy(,);           // replaces the content of a character with another character 
// strncpy(, ,);       //replaces a number of characters with another character
//strset(,'');        //sets all characters of a string to a given cgharacter (this function does not work for linux) solution: memset(, '', strlen());

//int result = strlen();  //allows us to calculate the length of a given string as int 
//int result = strcmp();  //allows us to compare all characters to another, giving 0 if they are the same and anyother number if not the same 
//int result = strncmp(); //compare n characters 
#include <stdio.h>
#include <string.h>

int main(){
    char str1 []= "pro";
    char str2 []= "player";
    
    strcat(str1,str2); 
    printf("%s",str1); //output: proplayer
    
    strncat(str1,str2,1); //n=1
    printf("%s",str1); //output: prop
    
    strcpy(str1,str2); 
    printf("%s",str1); //output: player
    
    strncpy(str1,str2,2); //replaces the first two letters
    printf("%s",str1); //output: plo
   
    memset(str1, '?', strlen(str1)); //strlen() means we want to set all characters to '?'
    printf("%s",str1); //output: ???

    int num= strlen(str1);
    printf("%d",num); //output: 3
    return 0;
}

#include <stdio.h>
#include <string.h>
int main()
{

    char str1[] = "pro";
    char str2[] = "pro";
    
    int result = strcmp(str1, str2);
    
    if(result== 0)
    {
        printf("\nOK"); //ouput: OK
    }
    else
    {
        printf("\nError");
    }
    return 0; 
}





//Loops

//for loop, using for(index,condition,increament or decrement); //repeates a section of code a limited amount of times 
#include <stdio.h>
#include <string.h>

int main(){
    for(int i = 1; i <= 10; i++){
        printf("%d \n",i); //output: 1 2 3 4 5 6 7 8 9 10
    }
return 0; 
}

//while loop, using while(condition) //repeates a section of code possible unlimited amount of times 
#include <stdio.h>
#include <string.h>
char name[25];


int main(){
printf("\nWhat's your name:\n");
fgets(name, 25, stdin);
name[strlen(name)-1]='\0'; // lets us get full name with out make new line
    
    while(strlen(name)==0){
        printf("\nYou did not enter your name");
        printf("\nWhat's your name: \n");
        fgets(name, 25, stdin);
        name[strlen(name)-1]='\0'; //gets rid of white space
    }
printf("\nHello %s",name);
return 0; 
}

//do while loop, do{}while(condition); //ao while loop executes code first onces then checks condition
#include <stdio.h>

int main(){
    int number = 0;
    int sum = 0; 
    
    do{
        printf("Enter a number above 10:");
        scanf("%d", &number);
        if(number < 10)
        {
            sum+=number;
        }
    }while(number < 10);
    
    printf("sum %d", sum);
    
}

//nested loop, A loop inside another loop
#include <stdio.h>
int main()
{
   int rows;
   int columns;
   char symbol;

   printf("\nEnter # of rows: ");
   scanf("%d", &rows); //input 4

   printf("Enter # of columns: ");
   scanf("%d", &columns); //input 5

   scanf("%c", &symbol); //clears \n from the buffer, making it so you don't end up with unneeded white space

   printf("Enter a symbol to use: ");
   scanf("%c", &symbol); //input $

   for(int i = 1; i <= rows; i++)
   {
      for(int j = 1; j <= columns; j++)
      {
         printf("%c",symbol );
      }
      printf("\n"); // final output: $$$$$
                                     $$$$$
                                     $$$$$
   }
   return 0;
}





//Continue And Break

// continue = skips rest of code & forces the next iteration of the loop
// break = exits a loop/switch
#include <stdio.h>

int main()
{
//continue
   for(int i = 1; i <= 1     0; i++)
   {
      if(i == 8)
      {
         continue;
      }
      printf("%d\n", i); //ouput: 1,2,3,4,5,6,7,9,10
   }
//break
   for(int i = 1; i <= 10; i++)
   {
      if(i == 8)
      {
         break;
      }
      printf("%d\n", i); //ouput: 1,2,3,4,5,6,7
   }
   return 0;
}




//Arrays
array = is a data structure that can store many values of the same data type.
#include <stdio.h>

int main()
{

  //double prices[] = {5.0, 10.0, 15.0, 25.0, 20.0}; // we call the varible by chosing desired index number
   double prices[5]; 

   prices[0] = 5.0;
   prices[1] = 10.0;
   prices[2] = 15.0;
   prices[3] = 25.0;
   prices[4] = 20.0;

   printf("$%.2lf", prices[0]); // 0 is index for 5.0
  
   return 0;
}




//Printing Arrays With Loop

//sizeof(); //reads the byte of the value 
//sizeof(array)/sizeof(array[0]); //this will read how many values are in the array
                             //math:  byte sum / byte of just one = how many elements are in the array 
#include <stdio.h>
int main()
{

    double prices[] = {5.0, 10.0, 15.0, 25.0}; 
    for(int i = 0; i < sizeof(prices)/sizeof(prices[0]); i++)
    {
        printf("£%.2lf",prices[i]);
        printf("\n");         
    }
   return 0;
}




// 2D Arrays

// 2D array = is an array, where each element is an entire array. useful if you need a matrix, grid, or table of data
//Example:
int numbers[2][3] = {
                    {1, 2, 3},
                    {4, 5, 6}
                    };
   

#include <stdio.h>
int main()
{
   int numbers[2][3];

   int rows = sizeof(numbers)/sizeof(numbers[0]);  //math: 24/12= 2
   int columns = sizeof(numbers[0])/sizeof(numbers[0][0]); //math: 12/4= 3

   printf("rows: %d\n", rows);
   printf("columns: %d\n", columns);

   numbers[0][0] = 1;
   numbers[0][1] = 2;
   numbers[0][2] = 3;
   numbers[1][0] = 4;
   numbers[1][1] = 5;
   numbers[1][2] = 6;

   for(int i = 0; i < rows; i++) // using nested loop to print the array
   {
      for(int j = 0; j < columns; j++)
      {
         printf("%d ", numbers[i][j]);
      }
      printf("\n");
   }

   return 0;
}





//Array Of Strings 

//char array[][]= {}; //first curly brace determines how much columns we can have. second curly brace determines how long the characters can be.

#include <stdio.h>
#include <string.h>
int main()
{
char number[2][10]={"hi","hello","hi"};

   for (int i=0; i <= sizeof(number)/sizeof(number[0]); i++)
   {
        printf("%s\n",number[i]);
      
   }
}




//Swapiung values of variables 

//swaping variables 
#include <stdio.h>
#include <string.h>
int main()
{
    int x = 2;
    int y = 3; 
    int temp; 
    
    temp = x;
    x = y; 
    y = temp; 
    
    printf("X = %d\n",x); //output: X = y
    printf("Y = %d",y);   //output: Y = x
}

// swapping arrays 
#include <stdio.h>
#include <string.h>
int main()
{
    char x[20] = "metal";
    char y[20] = "wood"; 
    char temp[20]; 
    
    strcpy(temp, x);
    strcpy(x, y);
    strcpy(y, temp);

    printf("X = %s\n",x); //ouput: X = wood
    printf("Y = %s",y);   //ouput: Y = metal
}




//Sorting An Array

#include <stdio.h>
int main()
{ 
   char array[] = {'F', 'A', 'D', 'B', 'C'};
   int size = sizeof(array)/sizeof(array[0]);

   sort(array, size);
   printArray(array, size);
 
   return 0; 
}

void sort(char array[], int size)
{
//we do 'size -1' as we want an index number, not an integer number. idex = 4, int = 5. 
   for(int i = 0; i < size - 1; i++)
   {
      for(int j = 0; j < (size -i )- 1; j++)
      {
//if the element to the right is bigger do...
         if(array[j] > array[j+1]) 
         {
            int temp = array[j];
            array[j] = array[j+1];
            array[j+1] = temp;
         }
      }
   }
}

void printArray(char array[], int size)
{
   for(int i = 0; i < size; i++)
   {
      printf("%c ", array[i]);
   }
}




//Strut


