// Format Specifier % = defines and formats a type of data to be displayed 

//<stdbool.h>, used for working with bool
//<ctype.h>,   used for working with string (string and char)

//%c = char 
//%s = string (array of characters)
//%f = float
//%lf = double 
//%d = integer 
//%d = bool

//%.1 = decimal precision 
//%1 = minium field width 
//%- = left allign 

#include <stdio.h>
float item1 = 2.3222;
float item2 = 12.3222;

int main(){
//decimal precision %.1
     printf("Item 1: %.2f",item1);  //ouput: Item 1: 2.32

//minium field width %1
     printf("Item 1: %8.2f/n",item1);  //ouput: Item 1:         2.32
     printf("Item 1: %8.2f/n",item2);  //ouput: Item 2:        12.32

//left align %-1
     printf("Item 1: %-8.2f",item1);  //output: Item 1: 2.32
     printf("Item 2: %-8.2f/n",item2);//ouput: Item 2: 12.32
     return 0;
}





//Arithmetic Operators 

// +  (addition)
// -  (subtraction)
// *  (multiplication)
// /  (division)
// %  (modulus),   shows the remainder 
// ++ (increment), adds one
// -- (decrement), takes one

#include <stdio.h>
int x = 5;
int y = 2;

int main(){
// /
     float z = x / (float)y;
     printf("%f", z); //output: 2.5 

// ++
     int x++;
     printf("%d", x); //output: 6 
     return 0;
}





//User Input 

// fgets(),   allows us to get user input but with white space, includes a newline character 
// scanf(),   allows us to get user input 

#include <stdio.h>
int age;
char name[25]; 

int main(){
// scanf()
     print("How old are you:")
     scanf("%i", &age);                   //input: 17
     printf("You are %i years old", age); //output: You are 17 years old 

// fgets()
     print("Whats's your name:")
     fgets(name , 25 , stdin);            //input: Fatiu Hafees
     printf("Hello %s", name);            //output: Hello Fatiu Hafees
     return 0;
}





//Math Functions 

//#include <math.h>, used for working with the function maths
//sqrt(),  lets us find the square root of a number
//pow(),   lets us raise something to the power of
//round(), lest us round a number
//ceil(),  lest us round up a number
//floor(), lest us round down a number
//fabs(),  lest us turn a negative number positive
//log()
//sin(), cos(), tna()

#include <stdio.h>
#include <math.h>

int main(){
//pow
     int a = pow (2,4);
     printf("%i",a), //output: 16

//fabs
     int b = fabs(-100);
     printf("%i",b); //output: 100
     return 0;
}





//If Statment 

//if(){},     if something is true program does whatever is in parentheses
//else if(){}, used for checking for different outcomes 
//else{},     if statement is not true we go to else 


//switch(){}, is an alternative to using more else if statements, test value against many cases for equality so ==(same as) 
//case '':,   we case '': instead of else if 
//break:,     must  always write at the end of each case
//default:,   we use default: instead of else

// if statment 
#include <stdio.h>

int main(){
    
    double A= 3.2;
// if statement 
    if (A==3.2){
        printf("valid");
    }
// else statement 
    else {
        printf("not valid");
    }  
    return 0;
}


// switch - character
#include <stdio.h>
char grade = 'A';

int main(){
   
    switch (grade){
        case 'A':
        printf("perfect\n");
        break; 
        
        case 'B':
        printf("Alright\n");
        break; 
        
        default:
        printf("Please enter valid grade\n"); 
    }
    return 0;
}
// switch - numbers
#include <stdio.h>
#include <math.h>

int main(){
    
    int grade = 2;
   
    printf("Enter grade:");
    scanf("%d",&grade);
   
    switch (grade){
        case 2:
        printf("perfect\n");
        break; 
        
        case 3:
        printf("Alright\n");
        break; 
        
        default:
        printf("Please enter valid grade\n"); 
    }
    return 0;
}





// Logical Operators

//&&,  used to write AND, so both statements must be true
//||,  used to write OR, so at least one statement is true 
//!,   used to write NOT, so reverses the state of a condition ( ! = 0 )

#include <stdio.h>
#include <stdbool.h>

int main(){
    int sunny = 0; 
    
    if (!sunny){
        printf("It's not sunny outside");  // this string will be printed since the variable "sunny" is false ("sunny" is 0)
    }
    else{
        printf("It's sunny outside");
    }
   
}





//Function (work like subroutine) 
Functions allow us to save and reuse code at any time

//void...(){},we use this command to initialise the function
//..();,    we use this command to call the function
#include <stdio.h>

void lyrics(){
     printf("\nI came, I saw, I came, I saw");
     printf("\nI praise the Lord, then break the law");
     printf("\nI take what's mine, then take some more");
     printf("\nIt rains, it pours, it rains, it pours\n");
}
    
int main(){

    lyrics();
    lyrics();   //the lyrics above will be printed twice 
    return 0;    
}





//Arguments And Parameters 

//Parameters, what a function expects when its invoked--void function(parameters)
//Arguments, what you are sending a function--function(Argument)

#include <stdio.h>
void lyrics(char x[],char y[]){ //parametor = char x[],char y[]
    printf("\nI came, I saw, I %s, I saw",x);
    printf("\nI %s the Lord, then break the law",y);
    printf("\nI take what's mine, then take some more");
    printf("\nIt rains, it pours, it rains, it pours\n");
}
int main(){
    
    char x[]= "came";  //don't put numbers in [] for char type
    char y[]= "praise";  
    
    lyrics(x,y); //argument = x,y
    return 0;
    
}

//better version, the one above is used when we have two different data types for the function 
#include <stdio.h>
char lyrics(char x[],char y[]){ 
    printf("\nI came, I saw, I %s, I saw",x);
    printf("\nI %s the Lord, then break the law",y);
    printf("\nI take what's mine, then take some more");
    printf("\nIt rains, it pours, it rains, it pours\n");
}
int main(){
    
    lyrics("cam", "praise");    
    
    return 0;
}





//Return Statment 

//return, lets us return a value back to int main from a function

#include <stdio.h>
double math(double x)// we need to change void to the data type of what we are returning
{  
     return x * x;    
}
int main()
{                
     double num = math(2.5);
     printf("%0.2lf",num);  //output: 6.25
     return 0;
}





//Ternary Operators = shortcut to if/else when assigning/returning a values 
               
//(condition)?, if value true: if value false

#include <stdio.h>
int math(int x,int y)
{  
    return (y>x)? y:x;     
}
int main()
{ 
    int num= math(10,6);
    printf("%d",num); //output: 10 
    return 0;
}





// Function Prototypes

// Ensures that calls to a function are made with the correct arguments
// A function prototype causes the compiler to flag an error if arguments are missing
// Make it a habbit to allways have functions go after main(){}
#include <stdio.h>

void hello(char[], int); //function prototype

int main()
{
   char name[] = "Bro";
   int age = 21;

   hello(name, age);

   return 0;
}

void hello(char name[], int age)
{
   printf("\nHello %s", name);
   printf("\nYou are %d years old", age);
}
